name: Build and deploy a container to Azure with Managed Identity

env:
  AZURE_WEBAPP_NAME: clustering microservice  # set this to the name of your Azure Web App
  ACR_NAME: clusteringservicecontainerregistry  # ACR name

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-24.04

    steps:
      # Step 1: Check out the repository
      - uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      # Step 3: Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 4: Create Azure Container Registry if it doesn't exist
      - name: Create Azure Container Registry
        run: |
          ACR_EXISTS=$(az acr list --query "length([?name=='${{ env.ACR_NAME }}'])" -o tsv)
          
          if [ "$ACR_EXISTS" -eq "0" ]; then
            echo "Creating Azure Container Registry..."
            az acr create \
              --name ${{ env.ACR_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --sku Basic \
              --admin-enabled true
            
            echo "Waiting for ACR to be fully provisioned..."
            sleep 30
          else
            echo "Azure Container Registry already exists"
            # Find the resource group for the existing ACR
            ACR_RESOURCE_GROUP=$(az acr list --query "[?name=='${{ env.ACR_NAME }}'].resourceGroup" -o tsv)
            echo "ACR_RESOURCE_GROUP=$ACR_RESOURCE_GROUP" >> $GITHUB_ENV
          fi


      # Step 7: Build the Docker image
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag my-image-name:latest

      # Step 8: Push to Azure Container Registry
      - name: Push to Azure Container Registry
        run: |
          # Determine which resource group contains the ACR
          if [ -n "${{ env.ACR_RESOURCE_GROUP }}" ]; then
            RESOURCE_GROUP_FOR_ACR="${{ env.ACR_RESOURCE_GROUP }}"
          else
            RESOURCE_GROUP_FOR_ACR="${{ secrets.RESOURCE_GROUP }}"
          fi
          
          # Get ACR credentials
          ACR_USERNAME=$(az acr credential show --name ${{ env.ACR_NAME }} --resource-group $RESOURCE_GROUP_FOR_ACR --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --resource-group $RESOURCE_GROUP_FOR_ACR --query "passwords[0].value" -o tsv)
          
          # Login to ACR
          echo "$ACR_PASSWORD" | docker login ${{ env.ACR_NAME }}.azurecr.io --username $ACR_USERNAME --password-stdin
          
          # Tag and push the image
          docker tag my-image-name:latest ${{ env.ACR_NAME }}.azurecr.io/my-image-name:latest
          docker push ${{ env.ACR_NAME }}.azurecr.io/my-image-name:latest

      # Step 9: Deploy to Azure Container Instance with Managed Identity
      - name: Deploy to Azure Container Instance
        run: |

          # Create container instance with managed identity
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name clustering-service \
            --image ${{ env.ACR_NAME }}.azurecr.io/my-image-name:latest \
            --cpu 1 \
            --memory 1 \
            --dns-name-label clustering-service-label \
            --ports 80 \
            --assign-identity ${{ env.IDENTITY_ID }}
            --os-type Linux \
            --location 'ukwest'
